{"version":3,"file":"main.js","sourceRoot":"./src/","sources":["main.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,QAAQ,MAAM,UAAU,CAAA;AAC/B,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAA;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AAEvC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;AACpC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;AAE7B,SAAe,WAAW,CAAC,MAAiD;;QACxE,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,MAAM,CAAC,CAAA;QAE7C,MAAM,GAAG,GAAG,IAAI,SAAS,EAAE,CAAA;QAE3B,GAAG,CAAC,KAAK,GAAG,SAAS,CAAA;QAErB,MAAM,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAA;QAEvC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAEtB,MAAM,MAAM,CAAC,IAAI,EAAE,CAAA;QAEnB,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAErD,IAAI,QAAQ,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,aAAa,CAAC,CAAA;YAE5C,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAA;SAC1B;IACL,CAAC;CAAA;AAED,QAAQ,CAAC,OAAO,CAAC,yCAAyC,EAAE;IACxD,eAAe,EAAE,IAAI;IACrB,cAAc,EAAE,IAAI;IACpB,gBAAgB,EAAE,KAAK;IACvB,kBAAkB,EAAE,IAAI;CAC3B,CAAC,CAAC,IAAI,CAAC,CAAM,UAAU,EAAC,EAAE;IACvB,MAAM,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC,WAAW,CAAA;IAErD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;QACxC,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;KACxC;IAED,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IAEzB,MAAM,WAAW,CAAC,aAAa,CAAC,CAAA;IAEhC,MAAM,WAAW,CAAC,UAAU,CAAC,CAAA;IAE7B,MAAM,WAAW,CAAC,YAAY,CAAC,CAAA;IAE/B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;AACxB,CAAC,CAAA,CAAC,CAAA","sourcesContent":["import mongoose from 'mongoose'\nimport { ExampleEntityModel } from './Example.entity'\nimport { SubEntity } from './SubEntity'\n\nconsole.log('The mongoose version:')\nconsole.log(mongoose.version)\n\nasync function performTest(valKey: 'catsProp' | 'catsPropV2' | 'catsArrProp') {\n    console.log(\"Performing test for: \" + valKey)\n\n    const cat = new SubEntity()\n\n    cat.value = 'Johnson'\n\n    const holder = new ExampleEntityModel()\n\n    holder[valKey] = [cat]\n\n    await holder.save()\n\n    const retrived = await ExampleEntityModel.findOne({})\n\n    if (retrived) {\n        console.log(`Test for ${valKey} succeeded.`)\n\n        await retrived.remove()\n    }\n}\n\nmongoose.connect('mongodb://localhost:27017/experiments-2', {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useFindAndModify: false,\n    useUnifiedTopology: true\n}).then(async connection => {\n    const collections = connection.connection.collections\n\n    for (const key of Object.keys(collections)) {\n        await collections[key].deleteMany({})\n    }\n\n    console.log('Connected!')\n\n    await performTest('catsArrProp')\n\n    await performTest('catsProp')\n\n    await performTest('catsPropV2')\n\n    console.log(\"Done.\")\n})\n\n\n\n"]}